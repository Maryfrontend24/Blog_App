Index: src/components/articleItem/ArticleItem.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { Modal, Tag, Avatar } from \"antd\";\nimport { useArticles } from \"/src/contexts/ArticlesDataContext.jsx\";\nimport { useUsers } from \"/src/contexts/UsersContext.jsx\";\nimport { cutDescriptionArticle } from \"../../utils/shortCutDescription.jsx\";\nimport defImage from \"/src/assets/defImage.jpg\";\n\nconst ArticleItem = ({ article, slug, isSinglePage = false }) => {\n  const { dispatch, deleteArticle, favoriteArticle } = useArticles();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const { state } = useUsers();\n  const token = state.token || localStorage.getItem(\"token\");\n\n  const handleClick = () => {\n    dispatch({ type: \"SET_SINGLE_ARTICLE\", payload: article });\n  };\n\n  const handleLike = async () => {\n    if (!token) {\n      console.log(\"No token available\");\n      return;\n    }\n    // локально обновляем состояние статьи\n    const updatedArticle = {\n      ...article,\n      favorited: !article.favorited,\n      favoritesCount: article.favorited\n        ? article.favoritesCount - 1\n        : article.favoritesCount + 1,\n    };\n    dispatch({ type: \"UPDATE_FAVORITED_ARTICLE\", payload: updatedArticle });\n\n    try {\n      await favoriteArticle(article.slug, token);\n    } catch (error) {\n      console.error(\"Error favoriting article:\", error);\n      dispatch({ type: \"UPDATE_FAVORITED_ARTICLE\", payload: article });\n    }\n  };\n\n  const handleDelete = () => {\n    setIsModalVisible(true);\n  };\n\n  const confirmDelete = async () => {\n    if (!token) {\n      console.log(\"No token available\");\n      return;\n    }\n\n    try {\n      await deleteArticle(article.slug, token);\n      dispatch({ type: \"DELETE_ARTICLE\", payload: article.slug });\n      setIsModalVisible(false);\n    } catch (error) {\n      console.error(\"Error deleting article:\", error);\n    }\n  };\n\n  const isAuthor = article.author.username === state.username;\n\n  return (\n    <div className={`article-wrapper ${isSinglePage ? \"single-page\" : \"\"}`}>\n      <div className=\"article-item\">\n        <div className=\"wrapper-column\">\n          <div className=\"flex\">\n            <Link\n              className=\"linkSlug\"\n              to={`/articles/${slug}`}\n              onClick={handleClick}\n            >\n              <h3>{article.title}</h3>\n            </Link>\n\n            <div className=\"wrapper-like\">\n              <button\n                onClick={handleLike}\n                style={{\n                  background: \"none\",\n                  border: \"none\",\n                  cursor: \"pointer\",\n                }}\n              >\n                <svg\n                  width=\"16\"\n                  height=\"16\"\n                  viewBox=\"0 0 16 16\"\n                  fill={article.favorited ? \"red\" : \"#000000BF\"}\n                >\n                  <path d=\"M7.99998 15.1099C7.7722 15.1099 7.5526 15.0273 7.38146 14.8774C6.73509 14.3123 6.11193 13.7811 5.56212 13.3126L5.55932 13.3102C3.94738 11.9365 2.55542 10.7502 1.58691 9.58167C0.504272 8.27527 0 7.03662 0 5.68347C0 4.36877 0.450805 3.15588 1.26928 2.26807C2.09753 1.36975 3.234 0.875 4.46972 0.875C5.3933 0.875 6.23912 1.16699 6.98363 1.7428C7.35936 2.03345 7.69994 2.38916 7.99998 2.80408C8.30015 2.38916 8.64061 2.03345 9.01646 1.7428C9.76097 1.16699 10.6068 0.875 11.5304 0.875C12.766 0.875 13.9026 1.36975 14.7308 2.26807C15.5493 3.15588 16 4.36877 16 5.68347C16 7.03662 15.4958 8.27527 14.4132 9.58154C13.4447 10.7502 12.0528 11.9364 10.4411 13.3099C9.89036 13.7792 9.26622 14.3112 8.61839 14.8777C8.44737 15.0273 8.22765 15.1099 7.99998 15.1099ZM4.46972 1.81226C3.49889 1.81226 2.60705 2.19971 1.95825 2.90332C1.2998 3.61755 0.937132 4.60486 0.937132 5.68347C0.937132 6.82153 1.3601 7.83936 2.30847 8.98364C3.22509 10.0897 4.58849 11.2516 6.1671 12.5969L6.17003 12.5994C6.72191 13.0697 7.34752 13.6029 7.99864 14.1722C8.65367 13.6018 9.28026 13.0677 9.83323 12.5967C11.4117 11.2513 12.775 10.0897 13.6916 8.98364C14.6399 7.83936 15.0628 6.82153 15.0628 5.68347C15.0628 4.60486 14.7002 3.61755 14.0417 2.90332C13.393 2.19971 12.5011 1.81226 11.5304 1.81226C10.8192 1.81226 10.1662 2.03833 9.5897 2.48413C9.07591 2.88159 8.718 3.38403 8.50816 3.7356C8.40025 3.91638 8.21031 4.02429 7.99998 4.02429C7.78966 4.02429 7.59972 3.91638 7.49181 3.7356C7.28209 3.38403 6.92418 2.88159 6.41027 2.48413C5.83373 2.03833 5.18078 1.81226 4.46972 1.81226Z\" />\n                </svg>\n              </button>\n              <span>{article.favoritesCount}</span>\n            </div>\n          </div>\n          <div className=\"tags\">\n            {article.tagList.map(\n              (tag, index) =>\n                tag && (\n                  <Tag\n                    key={`${article.slug}-${index}`}\n                    color=\"blue\"\n                    style={{ width: \"auto\", maxWidth: \"none\" }}\n                  >\n                    {tag}\n                  </Tag>\n                ),\n            )}\n          </div>\n          <div className=\"description\">\n            {cutDescriptionArticle(article.description, 115)}\n          </div>\n        </div>\n        <div className=\"avatar-flex\">\n          <div className=\"text\">\n            <div className=\"author-article\" style={{ fontSize: \"15px\" }}>\n              {article.author.username}\n            </div>\n            <div className=\"data-article\" style={{ fontSize: \"12px\" }}>\n              {new Date(article.createdAt).toLocaleDateString()}\n            </div>\n          </div>\n          <Avatar\n            src={article.author?.image || defImage}\n            className=\"article-avatar\"\n          />\n        </div>\n        {isSinglePage && isAuthor && (\n          <div className=\"article-actions\">\n            <NavLink to={`/articles/${article.slug}/edit-article`}>\n              <button\n                className=\"button-modal--edit\"\n                color=\"default\"\n                variant=\"outlined\"\n                style={{ marginRight: \"8px\" }}\n              >\n                Edit\n              </button>\n            </NavLink>\n\n            <button\n              color=\"default\"\n              variant=\"outlined\"\n              className=\"button-modal--del\"\n              onClick={handleDelete}\n            >\n              Delete\n            </button>\n          </div>\n        )}\n      </div>\n      <Modal\n        title=\"Are you sure you want to delete this article?\"\n        open={isModalVisible}\n        onOk={confirmDelete}\n        onCancel={() => setIsModalVisible(false)}\n      >\n        <p>Once deleted, you cannot undo this action.</p>\n      </Modal>\n    </div>\n  );\n};\n\nexport { ArticleItem };\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/articleItem/ArticleItem.jsx b/src/components/articleItem/ArticleItem.jsx
--- a/src/components/articleItem/ArticleItem.jsx	(revision 497de1981688132a66b43e8c95567738af785bd7)
+++ b/src/components/articleItem/ArticleItem.jsx	(date 1740414353867)
@@ -1,4 +1,4 @@
-import React, { useState } from "react";
+import React, { useState, useMemo } from "react";
 import { Link, NavLink } from "react-router-dom";
 import { Modal, Tag, Avatar } from "antd";
 import { useArticles } from "/src/contexts/ArticlesDataContext.jsx";
@@ -12,6 +12,11 @@
   const { state } = useUsers();
   const token = state.token || localStorage.getItem("token");
 
+  const avatarSrc = useMemo(
+    () => article.author?.image || defImage,
+    [article.author?.image],
+  );
+
   const handleClick = () => {
     dispatch({ type: "SET_SINGLE_ARTICLE", payload: article });
   };
@@ -21,21 +26,11 @@
       console.log("No token available");
       return;
     }
-    // локально обновляем состояние статьи
-    const updatedArticle = {
-      ...article,
-      favorited: !article.favorited,
-      favoritesCount: article.favorited
-        ? article.favoritesCount - 1
-        : article.favoritesCount + 1,
-    };
-    dispatch({ type: "UPDATE_FAVORITED_ARTICLE", payload: updatedArticle });
 
     try {
-      await favoriteArticle(article.slug, token);
+      await favoriteArticle(article.slug, token, article.favorited);
     } catch (error) {
-      console.error("Error favoriting article:", error);
-      dispatch({ type: "UPDATE_FAVORITED_ARTICLE", payload: article });
+      console.error("Error toggling favorite:", error);
     }
   };
 
@@ -121,10 +116,11 @@
               {new Date(article.createdAt).toLocaleDateString()}
             </div>
           </div>
-          <Avatar
-            src={article.author?.image || defImage}
-            className="article-avatar"
-          />
+          {/*<Avatar*/}
+          {/*  src={article.author?.image || defImage}*/}
+          {/*  className="article-avatar"*/}
+          {/*/>*/}
+          <Avatar src={avatarSrc} className="article-avatar" />
         </div>
         {isSinglePage && isAuthor && (
           <div className="article-actions">
Index: src/components/FormsModalAuth/UniversalForm.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useUsers } from \"/src/contexts/UsersContext.jsx\";\nimport { Spin } from \"antd\";\n\nconst UniversalForm = ({ formType }) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setError,\n    watch,\n  } = useForm();\n\n  const { registerUser, fetchLoginUser, updateUserProfile, state } = useUsers();\n  const { userStatusRequest } = state;\n  const navigate = useNavigate();\n  const [loginError, setLoginError] = useState(null);\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const lastFailedLogin = useRef({ email: \"\", password: \"\" });\n\n  const onSubmit = async (data) => {\n    if (isSubmitting) return;\n\n    if (\n      formType === \"signIn\" &&\n      data.email === lastFailedLogin.current.email &&\n      data.password === lastFailedLogin.current.password\n    ) {\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      let user;\n      if (formType === \"signIn\") {\n        const token = localStorage.getItem(\"token\");\n        if (token) {\n          navigate(\"/\");\n          return;\n        }\n\n        user = await fetchLoginUser(data.email, data.password);\n        if (user) {\n          navigate(\"/\");\n        }\n      }\n\n      if (formType === \"createAccount\") {\n        user = await registerUser(data.username, data.email, data.password);\n        if (user) {\n          navigate(\"/signin\");\n        }\n      }\n\n      if (formType === \"editProfile\") {\n        user = await updateUserProfile(\n          data.username,\n          data.email,\n          data.newPassword,\n          data.avatarUrl,\n        );\n        if (user) {\n          navigate(\"/articles\");\n        }\n      }\n    } catch (error) {\n      if (formType === \"signIn\") {\n        lastFailedLogin.current = {\n          email: data.email,\n          password: data.password,\n        };\n      }\n\n      if (error?.response?.data?.errors) {\n        const errorsFromServer = error.response.data.errors;\n        if (errorsFromServer.email) {\n          setError(\"email\", {\n            type: \"server\",\n            message: errorsFromServer.email,\n          });\n        }\n        if (errorsFromServer.password) {\n          setError(\"password\", {\n            type: \"server\",\n            message: errorsFromServer.password,\n          });\n        }\n        if (errorsFromServer.general) {\n          setError(\"password\", {\n            type: \"server\",\n            message: errorsFromServer.general,\n          });\n        }\n      } else {\n        setError(\"password\", {\n          type: \"server\",\n          message: \"Invalid email or password\",\n        });\n\n        setLoginError(\"Invalid email or password\");\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <form className=\"registration-form\" onSubmit={handleSubmit(onSubmit)}>\n      <h2>\n        {formType === \"signIn\"\n          ? \"Sign In\"\n          : formType === \"createAccount\"\n            ? \"Create new account\"\n            : \"Edit Profile\"}\n      </h2>\n\n      {formType === \"signIn\" && (\n        <>\n          <div className=\"form-group\">\n            <label>Email address:</label>\n            <input\n              type=\"email\"\n              name=\"email\"\n              autoComplete=\"email\"\n              {...register(\"email\", {\n                required: \"Email address is required\",\n                pattern: {\n                  value: /^\\S+@\\S+\\.\\S+$/,\n                  message: \"Invalid email format\",\n                },\n              })}\n            />\n            {errors.email && <p className=\"error\">{errors.email.message}</p>}\n          </div>\n\n          <div className=\"form-group\">\n            <label>Password:</label>\n            <input\n              type=\"password\"\n              name=\"password\"\n              autoComplete=\"current-password\"\n              {...register(\"password\", { required: \"Password is required\" })}\n            />\n            {errors.password && (\n              <p className=\"error\">{errors.password.message}</p>\n            )}\n          </div>\n        </>\n      )}\n\n      {formType === \"createAccount\" && (\n        <>\n          <div className=\"form-group\">\n            <label>Username:</label>\n            <input\n              type=\"text\"\n              name=\"username\"\n              autoComplete=\"username\"\n              {...register(\"username\", { required: \"Username is required\" })}\n            />\n            {errors.username && (\n              <p className=\"error\">{errors.username.message}</p>\n            )}\n          </div>\n\n          <div className=\"form-group\">\n            <label>Email address:</label>\n            <input\n              type=\"email\"\n              name=\"email\"\n              autoComplete=\"email\"\n              {...register(\"email\", {\n                required: \"Email address is required\",\n                pattern: {\n                  value: /^\\S+@\\S+\\.\\S+$/,\n                  message: \"Invalid email format\",\n                },\n              })}\n            />\n            {errors.email && <p className=\"error\">{errors.email.message}</p>}\n          </div>\n\n          <div className=\"form-group\">\n            <label>Password:</label>\n            <input\n              type=\"password\"\n              name=\"password\"\n              autoComplete=\"new-password\"\n              {...register(\"password\", { required: \"Password is required\" })}\n            />\n            {errors.password && (\n              <p className=\"error\">{errors.password.message}</p>\n            )}\n          </div>\n\n          <div className=\"form-group\">\n            <label>Repeat Password:</label>\n            <input\n              type=\"password\"\n              name=\"repeatPassword\"\n              autoComplete=\"new-password\"\n              {...register(\"repeatPassword\", {\n                required: \"Repeat your password\",\n                validate: (value) =>\n                  value === watch(\"password\") || \"Passwords do not match\",\n              })}\n            />\n            {errors.repeatPassword && (\n              <p className=\"error\">{errors.repeatPassword.message}</p>\n            )}\n          </div>\n\n          <div className=\"form-group__checkbox\">\n            <input\n              type=\"checkbox\"\n              {...register(\"agree\", { required: \"You must agree\" })}\n            />\n            <label>I agree to the processing of my personal information</label>\n            {errors.agree && <p className=\"error\">{errors.agree.message}</p>}\n          </div>\n        </>\n      )}\n\n      {formType === \"editProfile\" && (\n        <>\n          <div className=\"form-group\">\n            <label>Username:</label>\n            <input\n              type=\"text\"\n              name=\"username\"\n              autoComplete=\"username\"\n              {...register(\"username\", { required: \"Username is required\" })}\n            />\n            {errors.username && (\n              <p className=\"error\">{errors.username.message}</p>\n            )}\n          </div>\n\n          <div className=\"form-group\">\n            <label>Email address:</label>\n            <input\n              type=\"email\"\n              name=\"email\"\n              autoComplete=\"email\"\n              {...register(\"email\", {\n                required: \"Email is required\",\n                pattern: {\n                  value: /^\\S+@\\S+\\.\\S+$/,\n                  message: \"Invalid email format\",\n                },\n              })}\n            />\n            {errors.email && <p className=\"error\">{errors.email.message}</p>}\n          </div>\n\n          <div className=\"form-group\">\n            <label>New Password:</label>\n            <input\n              type=\"password\"\n              name=\"newPassword\"\n              autoComplete=\"new-password\"\n              {...register(\"newPassword\", {\n                minLength: {\n                  value: 6,\n                  message: \"Password must contain 6-40 characters\",\n                },\n                maxLength: {\n                  value: 40,\n                  message: \"Password must contain 6-40 characters\",\n                },\n              })}\n            />\n            {errors.newPassword && (\n              <p className=\"error\">{errors.newPassword.message}</p>\n            )}\n          </div>\n\n          <div className=\"form-group\">\n            <label>Avatar Image (URL):</label>\n            <input\n              type=\"text\"\n              name=\"avatarUrl\"\n              {...register(\"avatarUrl\", {\n                pattern: {\n                  value: /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/,\n                  message: \"Invalid URL\",\n                },\n              })}\n            />\n            {errors.avatarUrl && (\n              <p className=\"error\">{errors.avatarUrl.message}</p>\n            )}\n          </div>\n        </>\n      )}\n\n      <button\n        type=\"submit\"\n        disabled={isSubmitting || userStatusRequest === \"pending\"}\n      >\n        {formType === \"signIn\"\n          ? \"Login\"\n          : formType === \"createAccount\"\n            ? \"Create\"\n            : \"Save\"}\n      </button>\n\n      {userStatusRequest === \"pending\" && <Spin fullscreen />}\n\n      <div className=\"sign-in\">\n        {formType === \"signIn\" ? (\n          <p>\n            Don’t have an account? <Link to=\"/signup\">Sign Up</Link>\n          </p>\n        ) : formType === \"createAccount\" ? (\n          <p>\n            Already have an account? <Link to=\"/signin\">Sign In</Link>\n          </p>\n        ) : null}\n      </div>\n    </form>\n  );\n};\n\nexport { UniversalForm };\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/FormsModalAuth/UniversalForm.jsx b/src/components/FormsModalAuth/UniversalForm.jsx
--- a/src/components/FormsModalAuth/UniversalForm.jsx	(revision 497de1981688132a66b43e8c95567738af785bd7)
+++ b/src/components/FormsModalAuth/UniversalForm.jsx	(date 1740479023773)
@@ -1,329 +1,1403 @@
+// // import React, { useState, useRef } from "react";
+// // import { useForm } from "react-hook-form";
+// // import { Link, useNavigate } from "react-router-dom";
+// // import { useUsers } from "/src/contexts/UsersContext.jsx";
+// // import { Spin } from "antd";
+// //
+// // const UniversalForm = ({ formType }) => {
+// //   const {
+// //     register,
+// //     handleSubmit,
+// //     formState: { errors },
+// //     setError,
+// //     watch,
+// //   } = useForm();
+// //
+// //   const { registerUser, fetchLoginUser, updateUserProfile, state } = useUsers();
+// //   const { userStatusRequest } = state;
+// //   const navigate = useNavigate();
+// //   const [loginError, setLoginError] = useState(null);
+// //
+// //   const [isSubmitting, setIsSubmitting] = useState(false);
+// //   const lastFailedLogin = useRef({ email: "", password: "" });
+// //
+// //   const onSubmit = async (data) => {
+// //     if (isSubmitting) return;
+// //
+// //     if (
+// //       formType === "signIn" &&
+// //       data.email === lastFailedLogin.current.email &&
+// //       data.password === lastFailedLogin.current.password
+// //     ) {
+// //       return;
+// //     }
+// //
+// //     setIsSubmitting(true);
+// //
+// //     try {
+// //       let user;
+// //       if (formType === "signIn") {
+// //         const token = localStorage.getItem("token");
+// //         if (token) {
+// //           navigate("/");
+// //           return;
+// //         }
+// //
+// //         user = await fetchLoginUser(data.email, data.password);
+// //         if (user) {
+// //           navigate("/");
+// //         }
+// //       }
+// //
+// //       if (formType === "createAccount") {
+// //         user = await registerUser(data.username, data.email, data.password);
+// //         if (user) {
+// //           navigate("/signin");
+// //         }
+// //       }
+// //
+// //       if (formType === "editProfile") {
+// //         user = await updateUserProfile(
+// //           data.username,
+// //           data.email,
+// //           data.newPassword,
+// //           data.avatarUrl,
+// //         );
+// //         if (user) {
+// //           navigate("/articles");
+// //         }
+// //       }
+// //     } catch (error) {
+// //       if (formType === "signIn") {
+// //         lastFailedLogin.current = {
+// //           email: data.email,
+// //           password: data.password,
+// //         };
+// //       }
+// //
+// //       if (error?.response?.data?.errors) {
+// //         const errorsFromServer = error.response.data.errors;
+// //         if (errorsFromServer.email) {
+// //           setError("email", {
+// //             type: "server",
+// //             message: errorsFromServer.email,
+// //           });
+// //         }
+// //         if (errorsFromServer.password) {
+// //           setError("password", {
+// //             type: "server",
+// //             message: errorsFromServer.password,
+// //           });
+// //         }
+// //         if (errorsFromServer.general) {
+// //           setError("password", {
+// //             type: "server",
+// //             message: errorsFromServer.general,
+// //           });
+// //         }
+// //       } else {
+// //         setError("password", {
+// //           type: "server",
+// //           message: "Invalid email or password",
+// //         });
+// //
+// //         setLoginError("Invalid email or password");
+// //       }
+// //     } finally {
+// //       setIsSubmitting(false);
+// //     }
+// //   };
+// //
+// //   return (
+// //     <form className="registration-form" onSubmit={handleSubmit(onSubmit)}>
+// //       <h2>
+// //         {formType === "signIn"
+// //           ? "Sign In"
+// //           : formType === "createAccount"
+// //             ? "Create new account"
+// //             : "Edit Profile"}
+// //       </h2>
+// //
+// //       {formType === "signIn" && (
+// //         <>
+// //           <div className="form-group">
+// //             <label>Email address:</label>
+// //             <input
+// //               type="email"
+// //               name="email"
+// //               autoComplete="email"
+// //               {...register("email", {
+// //                 required: "Email address is required",
+// //                 pattern: {
+// //                   value: /^\S+@\S+\.\S+$/,
+// //                   message: "Invalid email format",
+// //                 },
+// //               })}
+// //             />
+// //             {errors.email && <p className="error">{errors.email.message}</p>}
+// //           </div>
+// //
+// //           <div className="form-group">
+// //             <label>Password:</label>
+// //             <input
+// //               type="password"
+// //               name="password"
+// //               autoComplete="current-password"
+// //               {...register("password", { required: "Password is required" })}
+// //             />
+// //             {errors.password && (
+// //               <p className="error">{errors.password.message}</p>
+// //             )}
+// //           </div>
+// //         </>
+// //       )}
+// //
+// //       {formType === "createAccount" && (
+// //         <>
+// //           <div className="form-group">
+// //             <label>Username:</label>
+// //             <input
+// //               type="text"
+// //               name="username"
+// //               autoComplete="username"
+// //               {...register("username", { required: "Username is required" })}
+// //             />
+// //             {errors.username && (
+// //               <p className="error">{errors.username.message}</p>
+// //             )}
+// //           </div>
+// //
+// //           <div className="form-group">
+// //             <label>Email address:</label>
+// //             <input
+// //               type="email"
+// //               name="email"
+// //               autoComplete="email"
+// //               {...register("email", {
+// //                 required: "Email address is required",
+// //                 pattern: {
+// //                   value: /^\S+@\S+\.\S+$/,
+// //                   message: "Invalid email format",
+// //                 },
+// //               })}
+// //             />
+// //             {errors.email && <p className="error">{errors.email.message}</p>}
+// //           </div>
+// //
+// //           <div className="form-group">
+// //             <label>Password:</label>
+// //             <input
+// //               type="password"
+// //               name="password"
+// //               autoComplete="new-password"
+// //               {...register("password", { required: "Password is required" })}
+// //             />
+// //             {errors.password && (
+// //               <p className="error">{errors.password.message}</p>
+// //             )}
+// //           </div>
+// //
+// //           <div className="form-group">
+// //             <label>Repeat Password:</label>
+// //             <input
+// //               type="password"
+// //               name="repeatPassword"
+// //               autoComplete="new-password"
+// //               {...register("repeatPassword", {
+// //                 required: "Repeat your password",
+// //                 validate: (value) =>
+// //                   value === watch("password") || "Passwords do not match",
+// //               })}
+// //             />
+// //             {errors.repeatPassword && (
+// //               <p className="error">{errors.repeatPassword.message}</p>
+// //             )}
+// //           </div>
+// //
+// //           <div className="form-group__checkbox">
+// //             <input
+// //               type="checkbox"
+// //               {...register("agree", { required: "You must agree" })}
+// //             />
+// //             <label>I agree to the processing of my personal information</label>
+// //             {errors.agree && <p className="error">{errors.agree.message}</p>}
+// //           </div>
+// //         </>
+// //       )}
+// //
+// //       {formType === "editProfile" && (
+// //         <>
+// //           <div className="form-group">
+// //             <label>Username:</label>
+// //             <input
+// //               type="text"
+// //               name="username"
+// //               autoComplete="username"
+// //               {...register("username", { required: "Username is required" })}
+// //             />
+// //             {errors.username && (
+// //               <p className="error">{errors.username.message}</p>
+// //             )}
+// //           </div>
+// //
+// //           <div className="form-group">
+// //             <label>Email address:</label>
+// //             <input
+// //               type="email"
+// //               name="email"
+// //               autoComplete="email"
+// //               {...register("email", {
+// //                 required: "Email is required",
+// //                 pattern: {
+// //                   value: /^\S+@\S+\.\S+$/,
+// //                   message: "Invalid email format",
+// //                 },
+// //               })}
+// //             />
+// //             {errors.email && <p className="error">{errors.email.message}</p>}
+// //           </div>
+// //
+// //           <div className="form-group">
+// //             <label>New Password:</label>
+// //             <input
+// //               type="password"
+// //               name="newPassword"
+// //               autoComplete="new-password"
+// //               {...register("newPassword", {
+// //                 minLength: {
+// //                   value: 6,
+// //                   message: "Password must contain 6-40 characters",
+// //                 },
+// //                 maxLength: {
+// //                   value: 40,
+// //                   message: "Password must contain 6-40 characters",
+// //                 },
+// //               })}
+// //             />
+// //             {errors.newPassword && (
+// //               <p className="error">{errors.newPassword.message}</p>
+// //             )}
+// //           </div>
+// //
+// //           <div className="form-group">
+// //             <label>Avatar Image (URL):</label>
+// //             <input
+// //               type="text"
+// //               name="avatarUrl"
+// //               {...register("avatarUrl", {
+// //                 pattern: {
+// //                   value: /^(https?|ftp):\/\/[^\s/$.?#].[^\s]*$/,
+// //                   message: "Invalid URL",
+// //                 },
+// //               })}
+// //             />
+// //             {errors.avatarUrl && (
+// //               <p className="error">{errors.avatarUrl.message}</p>
+// //             )}
+// //           </div>
+// //         </>
+// //       )}
+// //
+// //       <button
+// //         type="submit"
+// //         disabled={isSubmitting || userStatusRequest === "pending"}
+// //       >
+// //         {formType === "signIn"
+// //           ? "Login"
+// //           : formType === "createAccount"
+// //             ? "Create"
+// //             : "Save"}
+// //       </button>
+// //
+// //       {userStatusRequest === "pending" && <Spin fullscreen />}
+// //
+// //       <div className="sign-in">
+// //         {formType === "signIn" ? (
+// //           <p>
+// //             Don’t have an account? <Link to="/signup">Sign Up</Link>
+// //           </p>
+// //         ) : formType === "createAccount" ? (
+// //           <p>
+// //             Already have an account? <Link to="/signin">Sign In</Link>
+// //           </p>
+// //         ) : null}
+// //       </div>
+// //     </form>
+// //   );
+// // };
+// //
+// // export { UniversalForm };
+//
 import React, { useState, useRef } from "react";
 import { useForm } from "react-hook-form";
 import { Link, useNavigate } from "react-router-dom";
 import { useUsers } from "/src/contexts/UsersContext.jsx";
 import { Spin } from "antd";
 
-const UniversalForm = ({ formType }) => {
-  const {
-    register,
-    handleSubmit,
-    formState: { errors },
-    setError,
-    watch,
-  } = useForm();
-
-  const { registerUser, fetchLoginUser, updateUserProfile, state } = useUsers();
-  const { userStatusRequest } = state;
-  const navigate = useNavigate();
-  const [loginError, setLoginError] = useState(null);
-
-  const [isSubmitting, setIsSubmitting] = useState(false);
-  const lastFailedLogin = useRef({ email: "", password: "" });
-
-  const onSubmit = async (data) => {
-    if (isSubmitting) return;
-
-    if (
-      formType === "signIn" &&
-      data.email === lastFailedLogin.current.email &&
-      data.password === lastFailedLogin.current.password
-    ) {
-      return;
-    }
-
-    setIsSubmitting(true);
-
-    try {
-      let user;
-      if (formType === "signIn") {
-        const token = localStorage.getItem("token");
-        if (token) {
-          navigate("/");
-          return;
-        }
-
-        user = await fetchLoginUser(data.email, data.password);
-        if (user) {
-          navigate("/");
-        }
-      }
-
-      if (formType === "createAccount") {
-        user = await registerUser(data.username, data.email, data.password);
-        if (user) {
-          navigate("/signin");
-        }
-      }
-
-      if (formType === "editProfile") {
-        user = await updateUserProfile(
-          data.username,
-          data.email,
-          data.newPassword,
-          data.avatarUrl,
-        );
-        if (user) {
-          navigate("/articles");
-        }
-      }
-    } catch (error) {
-      if (formType === "signIn") {
-        lastFailedLogin.current = {
-          email: data.email,
-          password: data.password,
-        };
-      }
-
-      if (error?.response?.data?.errors) {
-        const errorsFromServer = error.response.data.errors;
-        if (errorsFromServer.email) {
-          setError("email", {
-            type: "server",
-            message: errorsFromServer.email,
-          });
-        }
-        if (errorsFromServer.password) {
-          setError("password", {
-            type: "server",
-            message: errorsFromServer.password,
-          });
-        }
-        if (errorsFromServer.general) {
-          setError("password", {
-            type: "server",
-            message: errorsFromServer.general,
-          });
-        }
-      } else {
-        setError("password", {
-          type: "server",
-          message: "Invalid email or password",
-        });
-
-        setLoginError("Invalid email or password");
-      }
-    } finally {
-      setIsSubmitting(false);
-    }
-  };
-
-  return (
-    <form className="registration-form" onSubmit={handleSubmit(onSubmit)}>
-      <h2>
-        {formType === "signIn"
-          ? "Sign In"
-          : formType === "createAccount"
-            ? "Create new account"
-            : "Edit Profile"}
-      </h2>
-
-      {formType === "signIn" && (
-        <>
-          <div className="form-group">
-            <label>Email address:</label>
-            <input
-              type="email"
-              name="email"
-              autoComplete="email"
-              {...register("email", {
-                required: "Email address is required",
-                pattern: {
-                  value: /^\S+@\S+\.\S+$/,
-                  message: "Invalid email format",
-                },
-              })}
-            />
-            {errors.email && <p className="error">{errors.email.message}</p>}
-          </div>
-
-          <div className="form-group">
-            <label>Password:</label>
-            <input
-              type="password"
-              name="password"
-              autoComplete="current-password"
-              {...register("password", { required: "Password is required" })}
-            />
-            {errors.password && (
-              <p className="error">{errors.password.message}</p>
-            )}
-          </div>
-        </>
-      )}
-
-      {formType === "createAccount" && (
-        <>
-          <div className="form-group">
-            <label>Username:</label>
-            <input
-              type="text"
-              name="username"
-              autoComplete="username"
-              {...register("username", { required: "Username is required" })}
-            />
-            {errors.username && (
-              <p className="error">{errors.username.message}</p>
-            )}
-          </div>
-
-          <div className="form-group">
-            <label>Email address:</label>
-            <input
-              type="email"
-              name="email"
-              autoComplete="email"
-              {...register("email", {
-                required: "Email address is required",
-                pattern: {
-                  value: /^\S+@\S+\.\S+$/,
-                  message: "Invalid email format",
-                },
-              })}
-            />
-            {errors.email && <p className="error">{errors.email.message}</p>}
-          </div>
+//
+// const UniversalForm = ({ formType }) => {
+//   const {
+//     register,
+//     handleSubmit,
+//     formState: { errors },
+//     setError,
+//     watch,
+//   } = useForm();
+//
+//   const { registerUser, fetchLoginUser, updateUserProfile, state } = useUsers();
+//   const { userStatusRequest } = state;
+//   const navigate = useNavigate();
+//   const [loginError, setLoginError] = useState(null);
+//
+//   const [isSubmitting, setIsSubmitting] = useState(false);
+//   const lastFailedLogin = useRef({ email: "", password: "" });
+//
+//   const onSubmit = async (data) => {
+//     if (isSubmitting) return;
+//
+//     if (
+//       formType === "signIn" &&
+//       data.email === lastFailedLogin.current.email &&
+//       data.password === lastFailedLogin.current.password
+//     ) {
+//       return;
+//     }
+//
+//     setIsSubmitting(true);
+//
+//     try {
+//       let user;
+//       if (formType === "signIn") {
+//         const token = localStorage.getItem("token");
+//         if (token) {
+//           navigate("/");
+//           return;
+//         }
+//
+//         user = await fetchLoginUser(data.email, data.password);
+//         if (user) {
+//           navigate("/");
+//         }
+//       }
+//
+//       if (formType === "createAccount") {
+//         user = await registerUser(data.username, data.email, data.password);
+//         if (user) {
+//           navigate("/signin");
+//         }
+//       }
+//
+//       if (formType === "editProfile") {
+//         user = await updateUserProfile(
+//           data.username,
+//           data.email,
+//           data.newPassword,
+//           data.avatarUrl,
+//         );
+//         if (user) {
+//           navigate("/articles");
+//         }
+//       }
+//     } catch (error) {
+//       if (formType === "signIn") {
+//         lastFailedLogin.current = {
+//           email: data.email,
+//           password: data.password,
+//         };
+//       }
+//
+//       if (error?.response?.data?.errors) {
+//         const errorsFromServer = error.response.data.errors;
+//
+//         // Ошибка для email (например, если email уже занят)
+//         if (errorsFromServer.email) {
+//           setError("email", {
+//             type: "server",
+//             message: errorsFromServer.email,
+//           });
+//         }
+//
+//         // Ошибка для username (например, если username уже занят)
+//         if (errorsFromServer.username) {
+//           setError("username", {
+//             type: "server",
+//             message: errorsFromServer.username,
+//           });
+//         }
+//
+//         // Ошибка для пароля
+//         if (errorsFromServer.password) {
+//           setError("password", {
+//             type: "server",
+//             message: errorsFromServer.password,
+//           });
+//         }
+//
+//         // Общая ошибка (например, неправильный логин/пароль)
+//         if (errorsFromServer.general) {
+//           setError("password", {
+//             type: "server",
+//             message: errorsFromServer.general,
+//           });
+//         }
+//       } else {
+//         setError("password", {
+//           type: "server",
+//           message: "Invalid email or password",
+//         });
+//
+//         setLoginError("Invalid email or password");
+//       }
+//     } finally {
+//       setIsSubmitting(false);
+//     }
+//   };
+//
+//   return (
+//     <form className="registration-form" onSubmit={handleSubmit(onSubmit)}>
+//       <h2>
+//         {formType === "signIn"
+//           ? "Sign In"
+//           : formType === "createAccount"
+//             ? "Create new account"
+//             : "Edit Profile"}
+//       </h2>
+//
+//       {formType === "signIn" && (
+//         <>
+//           <div className="form-group">
+//             <label>Email address:</label>
+//             <input
+//               type="email"
+//               name="email"
+//               autoComplete="email"
+//               {...register("email", {
+//                 required: "Email address is required",
+//                 pattern: {
+//                   value: /^\S+@\S+\.\S+$/,
+//                   message: "Invalid email format",
+//                 },
+//               })}
+//             />
+//             {errors.email && <p className="error">{errors.email.message}</p>}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>Password:</label>
+//             <input
+//               type="password"
+//               name="password"
+//               autoComplete="current-password"
+//               {...register("password", { required: "Password is required" })}
+//             />
+//             {errors.password && (
+//               <p className="error">{errors.password.message}</p>
+//             )}
+//           </div>
+//         </>
+//       )}
+//
+//       {formType === "createAccount" && (
+//         <>
+//           <div className="form-group">
+//             <label>Username:</label>
+//             <input
+//               type="text"
+//               name="username"
+//               autoComplete="username"
+//               {...register("username", { required: "Username is required" })}
+//             />
+//             {errors.username && (
+//               <p className="error">{errors.username.message}</p>
+//             )}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>Email address:</label>
+//             <input
+//               type="email"
+//               name="email"
+//               autoComplete="email"
+//               {...register("email", {
+//                 required: "Email address is required",
+//                 pattern: {
+//                   value: /^\S+@\S+\.\S+$/,
+//                   message: "Invalid email format",
+//                 },
+//               })}
+//             />
+//             {errors.email && <p className="error">{errors.email.message}</p>}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>Password:</label>
+//             <input
+//               type="password"
+//               name="password"
+//               autoComplete="new-password"
+//               {...register("password", { required: "Password is required" })}
+//             />
+//             {errors.password && (
+//               <p className="error">{errors.password.message}</p>
+//             )}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>Repeat Password:</label>
+//             <input
+//               type="password"
+//               name="repeatPassword"
+//               autoComplete="new-password"
+//               {...register("repeatPassword", {
+//                 required: "Repeat your password",
+//                 validate: (value) =>
+//                   value === watch("password") || "Passwords do not match",
+//               })}
+//             />
+//             {errors.repeatPassword && (
+//               <p className="error">{errors.repeatPassword.message}</p>
+//             )}
+//           </div>
+//
+//           <div className="form-group__checkbox">
+//             <input
+//               type="checkbox"
+//               {...register("agree", { required: "You must agree" })}
+//             />
+//             <label>I agree to the processing of my personal information</label>
+//             {errors.agree && <p className="error">{errors.agree.message}</p>}
+//           </div>
+//         </>
+//       )}
+//
+//       {formType === "editProfile" && (
+//         <>
+//           <div className="form-group">
+//             <label>Username:</label>
+//             <input
+//               type="text"
+//               name="username"
+//               autoComplete="username"
+//               {...register("username", { required: "Username is required" })}
+//             />
+//             {errors.username && (
+//               <p className="error">{errors.username.message}</p>
+//             )}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>Email address:</label>
+//             <input
+//               type="email"
+//               name="email"
+//               autoComplete="email"
+//               {...register("email", {
+//                 required: "Email is required",
+//                 pattern: {
+//                   value: /^\S+@\S+\.\S+$/,
+//                   message: "Invalid email format",
+//                 },
+//               })}
+//             />
+//             {errors.email && <p className="error">{errors.email.message}</p>}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>New Password:</label>
+//             <input
+//               type="password"
+//               name="newPassword"
+//               autoComplete="new-password"
+//               {...register("newPassword", {
+//                 minLength: {
+//                   value: 6,
+//                   message: "Password must contain 6-40 characters",
+//                 },
+//                 maxLength: {
+//                   value: 40,
+//                   message: "Password must contain 6-40 characters",
+//                 },
+//               })}
+//             />
+//             {errors.newPassword && (
+//               <p className="error">{errors.newPassword.message}</p>
+//             )}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>Avatar Image (URL):</label>
+//             <input
+//               type="text"
+//               name="avatarUrl"
+//               {...register("avatarUrl", {
+//                 pattern: {
+//                   value: /^(https?|ftp):\/\/[^\s/$.?#].[^\s]*$/,
+//                   message: "Invalid URL",
+//                 },
+//               })}
+//             />
+//             {errors.avatarUrl && (
+//               <p className="error">{errors.avatarUrl.message}</p>
+//             )}
+//           </div>
+//         </>
+//       )}
+//
+//       <button
+//         type="submit"
+//         disabled={isSubmitting || userStatusRequest === "pending"}
+//       >
+//         {formType === "signIn"
+//           ? "Login"
+//           : formType === "createAccount"
+//             ? "Create"
+//             : "Save"}
+//       </button>
+//
+//       {userStatusRequest === "pending" && <Spin fullscreen />}
+//
+//       <div className="sign-in">
+//         {formType === "signIn" ? (
+//           <p>
+//             Don’t have an account? <Link to="/signup">Sign Up</Link>
+//           </p>
+//         ) : formType === "createAccount" ? (
+//           <p>
+//             Already have an account? <Link to="/signin">Sign In</Link>
+//           </p>
+//         ) : null}
+//       </div>
+//     </form>
+//   );
+// };
+//
+// export { UniversalForm };
 
-          <div className="form-group">
-            <label>Password:</label>
-            <input
-              type="password"
-              name="password"
-              autoComplete="new-password"
-              {...register("password", { required: "Password is required" })}
-            />
-            {errors.password && (
-              <p className="error">{errors.password.message}</p>
-            )}
-          </div>
-
-          <div className="form-group">
-            <label>Repeat Password:</label>
-            <input
-              type="password"
-              name="repeatPassword"
-              autoComplete="new-password"
-              {...register("repeatPassword", {
-                required: "Repeat your password",
-                validate: (value) =>
-                  value === watch("password") || "Passwords do not match",
-              })}
-            />
-            {errors.repeatPassword && (
-              <p className="error">{errors.repeatPassword.message}</p>
-            )}
-          </div>
-
-          <div className="form-group__checkbox">
-            <input
-              type="checkbox"
-              {...register("agree", { required: "You must agree" })}
-            />
-            <label>I agree to the processing of my personal information</label>
-            {errors.agree && <p className="error">{errors.agree.message}</p>}
-          </div>
-        </>
-      )}
-
-      {formType === "editProfile" && (
-        <>
-          <div className="form-group">
-            <label>Username:</label>
-            <input
-              type="text"
-              name="username"
-              autoComplete="username"
-              {...register("username", { required: "Username is required" })}
-            />
-            {errors.username && (
-              <p className="error">{errors.username.message}</p>
-            )}
-          </div>
-
-          <div className="form-group">
-            <label>Email address:</label>
-            <input
-              type="email"
-              name="email"
-              autoComplete="email"
-              {...register("email", {
-                required: "Email is required",
-                pattern: {
-                  value: /^\S+@\S+\.\S+$/,
-                  message: "Invalid email format",
-                },
-              })}
-            />
-            {errors.email && <p className="error">{errors.email.message}</p>}
-          </div>
-
-          <div className="form-group">
-            <label>New Password:</label>
-            <input
-              type="password"
-              name="newPassword"
-              autoComplete="new-password"
-              {...register("newPassword", {
-                minLength: {
-                  value: 6,
-                  message: "Password must contain 6-40 characters",
-                },
-                maxLength: {
-                  value: 40,
-                  message: "Password must contain 6-40 characters",
-                },
-              })}
-            />
-            {errors.newPassword && (
-              <p className="error">{errors.newPassword.message}</p>
-            )}
-          </div>
-
-          <div className="form-group">
-            <label>Avatar Image (URL):</label>
-            <input
-              type="text"
-              name="avatarUrl"
-              {...register("avatarUrl", {
-                pattern: {
-                  value: /^(https?|ftp):\/\/[^\s/$.?#].[^\s]*$/,
-                  message: "Invalid URL",
-                },
-              })}
-            />
-            {errors.avatarUrl && (
-              <p className="error">{errors.avatarUrl.message}</p>
-            )}
-          </div>
-        </>
-      )}
-
-      <button
-        type="submit"
-        disabled={isSubmitting || userStatusRequest === "pending"}
-      >
-        {formType === "signIn"
-          ? "Login"
-          : formType === "createAccount"
-            ? "Create"
-            : "Save"}
-      </button>
-
-      {userStatusRequest === "pending" && <Spin fullscreen />}
-
-      <div className="sign-in">
-        {formType === "signIn" ? (
-          <p>
-            Don’t have an account? <Link to="/signup">Sign Up</Link>
-          </p>
-        ) : formType === "createAccount" ? (
-          <p>
-            Already have an account? <Link to="/signin">Sign In</Link>
-          </p>
-        ) : null}
-      </div>
-    </form>
-  );
-};
-
-export { UniversalForm };
+//
+// import React, { useState, useRef } from "react";
+// import { useForm } from "react-hook-form";
+// import { Link, useNavigate } from "react-router-dom";
+// import { useUsers } from "/src/contexts/UsersContext.jsx";
+// import { Spin } from "antd";
+//
+// const UniversalForm = ({ formType }) => {
+//   const {
+//     register,
+//     handleSubmit,
+//     formState: { errors },
+//     setError,
+//     watch,
+//   } = useForm();
+//
+//   const { registerUser, fetchLoginUser, updateUserProfile, state } = useUsers();
+//   const { userStatusRequest } = state;
+//   const navigate = useNavigate();
+//   const [loginError, setLoginError] = useState(null);
+//
+//   const [isSubmitting, setIsSubmitting] = useState(false);
+//   const lastFailedLogin = useRef({ email: "", password: "" });
+//
+//   const onSubmit = async (data) => {
+//     if (isSubmitting) return;
+//
+//     if (
+//       formType === "signIn" &&
+//       data.email === lastFailedLogin.current.email &&
+//       data.password === lastFailedLogin.current.password
+//     ) {
+//       return;
+//     }
+//
+//     setIsSubmitting(true);
+//
+//     try {
+//       let user;
+//       if (formType === "signIn") {
+//         const token = localStorage.getItem("token");
+//         if (token) {
+//           navigate("/");
+//           return;
+//         }
+//
+//         user = await fetchLoginUser(data.email, data.password);
+//         if (user) {
+//           navigate("/");
+//         }
+//       }
+//
+//       if (formType === "createAccount") {
+//         user = await registerUser(data.username, data.email, data.password);
+//         if (user) {
+//           navigate("/signin");
+//         }
+//       }
+//
+//       if (formType === "editProfile") {
+//         user = await updateUserProfile(
+//           data.username,
+//           data.email,
+//           data.newPassword,
+//           data.avatarUrl,
+//         );
+//         if (user) {
+//           navigate("/articles");
+//         }
+//       }
+//     } catch (error) {
+//       if (formType === "signIn") {
+//         lastFailedLogin.current = {
+//           email: data.email,
+//           password: data.password,
+//         };
+//       }
+//
+//       if (error?.response?.data?.errors) {
+//         const errorsFromServer = error.response.data.errors;
+//         if (errorsFromServer.email) {
+//           setError("email", {
+//             type: "server",
+//             message: errorsFromServer.email,
+//           });
+//         }
+//         if (errorsFromServer.password) {
+//           setError("password", {
+//             type: "server",
+//             message: errorsFromServer.password,
+//           });
+//         }
+//         if (errorsFromServer.username) {
+//           setError("username", {
+//             type: "server",
+//             message: errorsFromServer.username,
+//           });
+//         }
+//         if (errorsFromServer.general) {
+//           setError("password", {
+//             type: "server",
+//             message: errorsFromServer.general,
+//           });
+//         }
+//       } else {
+//         setError("password", {
+//           type: "server",
+//           message: "Invalid email or password",
+//         });
+//
+//         setLoginError("Invalid email or password");
+//       }
+//     } finally {
+//       setIsSubmitting(false);
+//     }
+//   };
+//
+//   return (
+//     <form className="registration-form" onSubmit={handleSubmit(onSubmit)}>
+//       <h2>
+//         {formType === "signIn"
+//           ? "Sign In"
+//           : formType === "createAccount"
+//             ? "Create new account"
+//             : "Edit Profile"}
+//       </h2>
+//
+//       {/* SIGN IN FORM */}
+//       {formType === "signIn" && (
+//         <>
+//           <div className="form-group">
+//             <label>Email address:</label>
+//             <input
+//               type="email"
+//               name="email"
+//               autoComplete="email"
+//               {...register("email", {
+//                 required: "Email address is required",
+//                 pattern: {
+//                   value: /^\S+@\S+\.\S+$/,
+//                   message: "Invalid email format",
+//                 },
+//               })}
+//             />
+//             {errors.email && <p className="error">{errors.email.message}</p>}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>Password:</label>
+//             <input
+//               type="password"
+//               name="password"
+//               autoComplete="current-password"
+//               {...register("password", { required: "Password is required" })}
+//             />
+//             {errors.password && (
+//               <p className="error">{errors.password.message}</p>
+//             )}
+//           </div>
+//         </>
+//       )}
+//
+//       {/* CREATE ACCOUNT FORM */}
+//       {formType === "createAccount" && (
+//         <>
+//           <div className="form-group">
+//             <label>Username:</label>
+//             <input
+//               type="text"
+//               name="username"
+//               autoComplete="username"
+//               {...register("username", {
+//                 required: "Username is required",
+//                 minLength: {
+//                   value: 3,
+//                   message: "Username must be between 3 and 20 characters",
+//                 },
+//                 maxLength: {
+//                   value: 20,
+//                   message: "Username must be between 3 and 20 characters",
+//                 },
+//               })}
+//             />
+//             {errors.username && (
+//               <p className="error">{errors.username.message}</p>
+//             )}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>Email address:</label>
+//             <input
+//               type="email"
+//               name="email"
+//               autoComplete="email"
+//               {...register("email", {
+//                 required: "Email address is required",
+//                 pattern: {
+//                   value: /^\S+@\S+\.\S+$/,
+//                   message: "Invalid email format",
+//                 },
+//               })}
+//             />
+//             {errors.email && <p className="error">{errors.email.message}</p>}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>Password:</label>
+//             <input
+//               type="password"
+//               name="password"
+//               autoComplete="new-password"
+//               {...register("password", {
+//                 required: "Password is required",
+//                 minLength: {
+//                   value: 6,
+//                   message: "Password must be between 6 and 40 characters",
+//                 },
+//                 maxLength: {
+//                   value: 40,
+//                   message: "Password must be between 6 and 40 characters",
+//                 },
+//               })}
+//             />
+//             {errors.password && (
+//               <p className="error">{errors.password.message}</p>
+//             )}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>Repeat Password:</label>
+//             <input
+//               type="password"
+//               name="repeatPassword"
+//               autoComplete="new-password"
+//               {...register("repeatPassword", {
+//                 required: "Repeat your password",
+//                 validate: (value) =>
+//                   value === watch("password") || "Passwords do not match",
+//               })}
+//             />
+//             {errors.repeatPassword && (
+//               <p className="error">{errors.repeatPassword.message}</p>
+//             )}
+//           </div>
+//
+//           <div className="form-group__checkbox">
+//             <input
+//               type="checkbox"
+//               {...register("agree", { required: "You must agree" })}
+//             />
+//             <label>I agree to the processing of my personal information</label>
+//             {errors.agree && <p className="error">{errors.agree.message}</p>}
+//           </div>
+//         </>
+//       )}
+//
+//       {/* EDIT PROFILE FORM */}
+//       {formType === "editProfile" && (
+//         <>
+//           <div className="form-group">
+//             <label>Username:</label>
+//             <input
+//               type="text"
+//               name="username"
+//               autoComplete="username"
+//               {...register("username", {
+//                 required: "Username is required",
+//               })}
+//             />
+//             {errors.username && (
+//               <p className="error">{errors.username.message}</p>
+//             )}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>Email address:</label>
+//             <input
+//               type="email"
+//               name="email"
+//               autoComplete="email"
+//               {...register("email", {
+//                 required: "Email is required",
+//                 pattern: {
+//                   value: /^\S+@\S+\.\S+$/,
+//                   message: "Invalid email format",
+//                 },
+//               })}
+//             />
+//             {errors.email && <p className="error">{errors.email.message}</p>}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>New Password:</label>
+//             <input
+//               type="password"
+//               name="newPassword"
+//               autoComplete="new-password"
+//               {...register("newPassword", {
+//                 minLength: {
+//                   value: 6,
+//                   message: "Password must be between 6 and 40 characters",
+//                 },
+//                 maxLength: {
+//                   value: 40,
+//                   message: "Password must be between 6 and 40 characters",
+//                 },
+//               })}
+//             />
+//             {errors.newPassword && (
+//               <p className="error">{errors.newPassword.message}</p>
+//             )}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>Avatar Image (URL):</label>
+//             <input
+//               type="text"
+//               name="avatarUrl"
+//               {...register("avatarUrl", {
+//                 pattern: {
+//                   value: /^(https?|ftp):\/\/[^\s/$.?#].[^\s]*$/,
+//                   message:
+//                     "Invalid URL. Ensure it starts with http:// or https://",
+//                 },
+//               })}
+//             />
+//             {errors.avatarUrl && (
+//               <p className="error">{errors.avatarUrl.message}</p>
+//             )}
+//           </div>
+//         </>
+//       )}
+//
+//       <button
+//         type="submit"
+//         disabled={isSubmitting || userStatusRequest === "pending"}
+//       >
+//         {formType === "signIn"
+//           ? "Login"
+//           : formType === "createAccount"
+//             ? "Create"
+//             : "Save"}
+//       </button>
+//
+//       {userStatusRequest === "pending" && <Spin fullscreen />}
+//
+//       <div className="sign-in">
+//         {formType === "signIn" ? (
+//           <p>
+//             Don’t have an account? <Link to="/signup">Sign Up</Link>
+//           </p>
+//         ) : formType === "createAccount" ? (
+//           <p>
+//             Already have an account? <Link to="/signin">Sign In</Link>
+//           </p>
+//         ) : null}
+//       </div>
+//     </form>
+//   );
+// };
+//
+// export { UniversalForm };
+//
+// import React, { useState, useRef } from "react";
+// import { useForm } from "react-hook-form";
+// import { Link, useNavigate } from "react-router-dom";
+// import { useUsers } from "/src/contexts/UsersContext.jsx";
+// import { Spin } from "antd";
+// import * as yup from "yup";
+// import { yupResolver } from "@hookform/resolvers/yup";
+//
+// const UniversalForm = ({ formType }) => {
+//   const checkUsernameAvailability = async (username) => {
+//     // Здесь должна быть ваша логика для проверки доступности имени пользователя
+//     const response = await fetch(`/api/check-username?username=${username}`);
+//     const data = await response.json();
+//     return data.available; // Предполагается, что API возвращает объект с полем available
+//   };
+//
+//   const getValidationSchema = (formType) => {
+//     switch (formType) {
+//       case "createAccount":
+//         return yup.object({
+//           username: yup
+//             .string()
+//             .required("Username is required")
+//             .min(3, "Username must be between 3 and 20 characters")
+//             .max(20, "Username must be between 3 and 20 characters")
+//             .test(
+//               "username-availability",
+//               "Username is already taken",
+//               async (value) => {
+//                 if (value) {
+//                   const isAvailable = await checkUsernameAvailability(value);
+//                   return isAvailable;
+//                 }
+//                 return true; // Если значение пустое, пропускаем проверку
+//               },
+//             ),
+//           email: yup
+//             .string()
+//             .required("Email address is required")
+//             .email("Invalid email format"),
+//           password: yup
+//             .string()
+//             .required("Password is required")
+//             .min(6, "Password must be between 6 and 40 characters")
+//             .max(40, "Password must be between 6 and 40 characters"),
+//           repeatPassword: yup
+//             .string()
+//             .required("Repeat your password")
+//             .oneOf([yup.ref("password")], "Passwords do not match"),
+//           agree: yup
+//             .boolean()
+//             .oneOf(
+//               [true],
+//               "You must agree to the processing of your personal information",
+//             ),
+//         });
+//       case "editProfile":
+//         return yup.object({
+//           username: yup.string().required("Username is required"),
+//           email: yup
+//             .string()
+//             .required("Email is required")
+//             .email("Invalid email format"),
+//           newPassword: yup
+//             .string()
+//             .min(6, "Password must be between 6 and 40 characters")
+//             .max(40, "Password must be between 6 and 40 characters"),
+//           avatarUrl: yup
+//             .string()
+//             .url("Invalid URL. Ensure it starts with http:// or https://")
+//             .nullable(),
+//         });
+//       default:
+//         return yup.object({});
+//     }
+//   };
+//
+//   const {
+//     register,
+//     handleSubmit,
+//     formState: { errors },
+//     setError,
+//     watch,
+//   } = useForm({
+//     resolver: yupResolver(getValidationSchema(formType)),
+//   });
+//
+//   const { registerUser, fetchLoginUser, updateUserProfile, state } = useUsers();
+//   const { userStatusRequest } = state;
+//   const navigate = useNavigate();
+//   const [loginError, setLoginError] = useState(null);
+//
+//   const [isSubmitting, setIsSubmitting] = useState(false);
+//   const lastFailedLogin = useRef({ email: "", password: "" });
+//
+//   const onSubmit = async (data) => {
+//     if (isSubmitting) return;
+//
+//     if (
+//       formType === "signIn" &&
+//       data.email === lastFailedLogin.current.email &&
+//       data.password === lastFailedLogin.current.password
+//     ) {
+//       return;
+//     }
+//
+//     setIsSubmitting(true);
+//
+//     try {
+//       let user;
+//       if (formType === "signIn") {
+//         const token = localStorage.getItem("token");
+//         if (token) {
+//           navigate("/");
+//           return;
+//         }
+//
+//         user = await fetchLoginUser(data.email, data.password);
+//         if (user) {
+//           navigate("/");
+//         }
+//       }
+//
+//       if (formType === "createAccount") {
+//         user = await registerUser(data.username, data.email, data.password);
+//         if (user) {
+//           navigate("/signin");
+//         }
+//       }
+//
+//       if (formType === "editProfile") {
+//         user = await updateUserProfile(
+//           data.username,
+//           data.email,
+//           data.newPassword,
+//           data.avatarUrl,
+//         );
+//         if (user) {
+//           navigate("/articles");
+//         }
+//       }
+//     } catch (error) {
+//       if (formType === "signIn") {
+//         lastFailedLogin.current = {
+//           email: data.email,
+//           password: data.password,
+//         };
+//       }
+//
+//       if (error?.response?.data?.errors) {
+//         const errorsFromServer = error.response.data.errors;
+//
+//         // Проверка и установка ошибки для username
+//         if (errorsFromServer.username) {
+//           setError("username", {
+//             type: "server",
+//             message: errorsFromServer.username, // Сообщение об ошибке
+//           });
+//         }
+//
+//         // Обработка ошибок для других полей (email, password и т.д.)
+//         if (errorsFromServer.email) {
+//           setError("email", {
+//             type: "server",
+//             message: errorsFromServer.email,
+//           });
+//         }
+//         if (errorsFromServer.password) {
+//           setError("password", {
+//             type: "server",
+//             message: errorsFromServer.password,
+//           });
+//         }
+//       } else {
+//         setError("password", {
+//           type: "server",
+//           message: "Invalid email or password",
+//         });
+//
+//         setLoginError("Invalid email or password");
+//       }
+//     } finally {
+//       setIsSubmitting(false);
+//     }
+//   };
+//
+//   return (
+//     <form className="registration-form" onSubmit={handleSubmit(onSubmit)}>
+//       <h2>
+//         {formType === "signIn"
+//           ? "Sign In"
+//           : formType === "createAccount"
+//             ? "Create new account"
+//             : "Edit Profile"}
+//       </h2>
+//
+//       {/* SIGN IN FORM */}
+//       {formType === "signIn" && (
+//         <>
+//           <div className="form-group">
+//             <label>Email address:</label>
+//             <input
+//               type="email"
+//               name="email"
+//               autoComplete="email"
+//               {...register("email")}
+//             />
+//             {errors.email && <p className="error">{errors.email.message}</p>}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>Password:</label>
+//             <input
+//               type="password"
+//               name="password"
+//               autoComplete="current-password"
+//               {...register("password")}
+//             />
+//             {errors.password && (
+//               <p className="error">{errors.password.message}</p>
+//             )}
+//           </div>
+//         </>
+//       )}
+//
+//       {/* CREATE ACCOUNT FORM */}
+//       {formType === "createAccount" && (
+//         <>
+//           <div className="form-group">
+//             <label>Username:</label>
+//             <input
+//               type="text"
+//               name="username"
+//               autoComplete="username"
+//               {...register("username")}
+//             />
+//             {errors.username && (
+//               <p className="error">{errors.username.message}</p> // Здесь будет выводиться ошибка, если username уже существует
+//             )}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>Email address:</label>
+//             <input
+//               type="email"
+//               name="email"
+//               autoComplete="email"
+//               {...register("email")}
+//             />
+//             {errors.email && <p className="error">{errors.email.message}</p>}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>Password:</label>
+//             <input
+//               type="password"
+//               name="password"
+//               autoComplete="new-password"
+//               {...register("password")}
+//             />
+//             {errors.password && (
+//               <p className="error">{errors.password.message}</p>
+//             )}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>Repeat Password:</label>
+//             <input
+//               type="password"
+//               name="repeatPassword"
+//               autoComplete="new-password"
+//               {...register("repeatPassword")}
+//             />
+//             {errors.repeatPassword && (
+//               <p className="error">{errors.repeatPassword.message}</p>
+//             )}
+//           </div>
+//
+//           <div className="form-group__checkbox">
+//             <input type="checkbox" {...register("agree")} />
+//             <label>I agree to the processing of my personal information</label>
+//             {errors.agree && <p className="error">{errors.agree.message}</p>}
+//           </div>
+//         </>
+//       )}
+//
+//       {/* EDIT PROFILE FORM */}
+//       {formType === "editProfile" && (
+//         <>
+//           <div className="form-group">
+//             <label>Username:</label>
+//             <input
+//               type="text"
+//               name="username"
+//               autoComplete="username"
+//               {...register("username")}
+//             />
+//             {errors.username && (
+//               <p className="error">{errors.username.message}</p>
+//             )}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>Email address:</label>
+//             <input
+//               type="email"
+//               name="email"
+//               autoComplete="email"
+//               {...register("email")}
+//             />
+//             {errors.email && <p className="error">{errors.email.message}</p>}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>New Password:</label>
+//             <input
+//               type="password"
+//               name="newPassword"
+//               autoComplete="new-password"
+//               {...register("newPassword")}
+//             />
+//             {errors.newPassword && (
+//               <p className="error">{errors.newPassword.message}</p>
+//             )}
+//           </div>
+//
+//           <div className="form-group">
+//             <label>Avatar Image (URL):</label>
+//             <input type="text" name="avatarUrl" {...register("avatarUrl")} />
+//             {errors.avatarUrl && (
+//               <p className="error">{errors.avatarUrl.message}</p>
+//             )}
+//           </div>
+//         </>
+//       )}
+//
+//       <button
+//         type="submit"
+//         disabled={isSubmitting || userStatusRequest === "pending"}
+//       >
+//         {formType === "signIn"
+//           ? "Login"
+//           : formType === "createAccount"
+//             ? "Create"
+//             : "Save"}
+//       </button>
+//
+//       {userStatusRequest === "pending" && <Spin fullscreen />}
+//
+//       <div className="sign-in">
+//         {formType === "signIn" ? (
+//           <p>
+//             Don’t have an account? <Link to="/signup">Sign Up</Link>
+//           </p>
+//         ) : formType === "createAccount" ? (
+//           <p>
+//             Already have an account? <Link to="/signin">Sign In</Link>
+//           </p>
+//         ) : null}
+//       </div>
+//     </form>
+//   );
+// };
+//
+// export { UniversalForm };
Index: src/contexts/UsersContext.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { createContext, useContext, useEffect, useReducer } from \"react\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"../utils/constant.jsx\";\nimport { useNavigate } from \"react-router-dom\";\nimport defImage from \"/src/assets/defImage.jpg\";\n\nconst UsersContext = createContext();\n\n// state user\nconst initialState = {\n  username: \"\",\n  email: \"\",\n  bio: \"\",\n  image: \"\",\n  errorUser: null,\n  userIsEdit: false,\n  userStatusRequest: null,\n  token: localStorage.getItem(\"token\"),\n  serverErrors: null,\n  lastFailedAttempt: { email: null, password: null },\n};\n\nconsole.log(\"Initial token:\", localStorage.getItem(\"token\"));\n\n// Редьюсер\nconst userReducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_LOADING\":\n      return { ...state, userStatusRequest: \"pending\" };\n    case \"STOP_LOADING\":\n      return { ...state, userStatusRequest: \"fulfilled\" };\n    case \"SET_USER\":\n      return {\n        ...state,\n        username: action.payload.username,\n        email: action.payload.email,\n        bio: action.payload.bio,\n        token: action.payload.token,\n        image: action.payload.image || defImage,\n        userIsEdit: true,\n        userStatusRequest: \"fulfilled\",\n        serverErrors: null,\n      };\n    case \"ERROR\":\n      return {\n        ...state,\n        errorUser: action.payload,\n        userStatusRequest: \"rejected\",\n        serverError: action.payload === \"500\" ? \"500\" : null,\n      };\n    case \"SET_LAST_FAILED_ATTEMPT\":\n      return {\n        ...state,\n        lastFailedAttempt: action.payload, // Обновляем данные о последней неудачной попытке\n        errorUser: action.payload.email\n          ? state.errorUser || \"Incorrect email or password. Try again.\" // Не сбрасываем ошибку\n          : state.errorUser,\n      };\n\n    case \"CLEAR_ERROR\":\n      return { ...state, errorUser: null };\n    case \"LOGOUT\":\n      return {\n        ...state,\n        username: \"\",\n        email: \"\",\n        bio: \"\",\n        image: \"\",\n        userIsEdit: false,\n        token: null,\n        userStatusRequest: \"fulfilled\",\n        serverErrors: null,\n      };\n    default:\n      return state;\n  }\n};\n\n// Провайдер\nexport const UsersProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(userReducer, initialState);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      axios.defaults.headers.common[\"Authorization\"] = `Token ${token}`;\n\n      // Загружаем пользователя из LocalStr\n      const storedUser = localStorage.getItem(\"user\");\n      if (storedUser) {\n        const user = JSON.parse(storedUser);\n        dispatch({ type: \"SET_USER\", payload: user });\n      }\n    }\n  }, []);\n\n  const registerUser = async (username, email, password) => {\n    dispatch({ type: \"SET_LOADING\" });\n\n    try {\n      const response = await axios.post(`${BASE_URL}/users`, {\n        user: { username, email, password },\n      });\n\n      console.log(\"User registered successfully:\", response.data);\n      navigate(\"/signin\");\n    } catch (error) {\n      console.error(\"Error during registration:\", error);\n\n      const errorMessage =\n        error.response && error.response.data.errors\n          ? error.response.data.errors.body[0]\n          : error.response\n            ? `Error ${error.response.status}: ${error.response.statusText}`\n            : error.message || \"Network error\";\n\n      if (error.response && error.response.status === 500) {\n        dispatch({\n          type: \"ERROR\",\n          payload: \"500\",\n        });\n      } else {\n        dispatch({\n          type: \"ERROR\",\n          payload: errorMessage,\n        });\n      }\n    } finally {\n      dispatch({ type: \"STOP_LOADING\" });\n    }\n  };\n\n  const fetchLoginUser = async (email, password) => {\n    const storedToken = localStorage.getItem(\"token\");\n\n    if (storedToken) {\n      axios.defaults.headers.common[\"Authorization\"] = `Token ${storedToken}`;\n      const storedUser = localStorage.getItem(\"user\");\n      if (storedUser) {\n        const user = JSON.parse(storedUser);\n        dispatch({ type: \"SET_USER\", payload: user });\n      }\n      navigate(\"/articles\");\n      return;\n    }\n\n    if (\n      state.lastFailedAttempt.email === email &&\n      state.lastFailedAttempt.password === password\n    ) {\n      dispatch({\n        type: \"ERROR\",\n        payload: \"Incorrect email or password. Try again.\",\n      });\n      return; // не отправляем запроc!\n    }\n\n    if (\n      state.lastFailedAttempt.email !== email ||\n      state.lastFailedAttempt.password !== password\n    ) {\n      dispatch({\n        type: \"SET_LAST_FAILED_ATTEMPT\",\n        payload: { email: null, password: null },\n      });\n    }\n\n    dispatch({ type: \"SET_LOADING\" });\n\n    const timeout = setTimeout(() => {\n      dispatch({\n        type: \"ERROR\",\n        payload: \"Request timeout. Please try again.\",\n      });\n      dispatch({ type: \"STOP_LOADING\" });\n    }, 10000);\n\n    try {\n      const response = await axios.post(\n        `${BASE_URL}/users/login`,\n        { user: { email, password } },\n        { headers: { \"Content-Type\": \"application/json\" } },\n      );\n\n      const { user } = response.data;\n\n      if (!user?.token) {\n        throw new Error(\"Token not received or invalid\");\n      }\n\n      clearTimeout(timeout);\n\n      localStorage.setItem(\n        \"user\",\n        JSON.stringify({\n          username: user.username,\n          email: user.email,\n          bio: user.bio,\n          image: user.image,\n          token: user.token,\n        }),\n      );\n      localStorage.setItem(\"token\", user.token);\n\n      axios.defaults.headers.common[\"Authorization\"] = `Token ${user.token}`;\n\n      dispatch({ type: \"SET_USER\", payload: user });\n\n      // После успешного входа сбрасываем данные о  попытке\n      dispatch({\n        type: \"SET_LAST_FAILED_ATTEMPT\",\n        payload: { email: null, password: null },\n      });\n\n      navigate(\"/articles\");\n    } catch (error) {\n      clearTimeout(timeout);\n\n      const errorMessage =\n        error.response && error.response.data.errors\n          ? error.response.data.errors.body[0]\n          : error.response\n            ? `Error ${error.response.status}: ${error.response.statusText}`\n            : error.message || \"Network error\";\n\n      if (error.response?.status === 500) {\n        dispatch({\n          type: \"ERROR\",\n          payload: \"Internal Server Error. Please try again later.\",\n        });\n        alert(\"Произошла ошибка на сервере. Перенаправляем на главную.\");\n        setTimeout(() => navigate(\"/\"), 3000);\n      } else {\n        dispatch({ type: \"ERROR\", payload: errorMessage });\n\n        // Сохраняем данные неудачного входа\n        dispatch({\n          type: \"SET_LAST_FAILED_ATTEMPT\",\n          payload: { email, password },\n        });\n      }\n    } finally {\n      dispatch({ type: \"STOP_LOADING\" });\n    }\n  };\n\n  const updateUserProfile = async (username, email, newPassword, avatarUrl) => {\n    dispatch({ type: \"SET_LOADING\" });\n\n    try {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      const token = user ? user.token : null;\n\n      const dataToUpdate = {\n        user: {\n          username,\n          email,\n          bio: \"\",\n          image: avatarUrl || \"\",\n        },\n      };\n\n      if (newPassword) {\n        dataToUpdate.user.password = newPassword;\n      }\n\n      const response = await axios.put(`${BASE_URL}/user`, dataToUpdate, {\n        headers: { Authorization: `Token ${token}` },\n      });\n\n      const { user: updatedUser } = response.data;\n\n      localStorage.setItem(\n        \"user\",\n        JSON.stringify({\n          username: updatedUser.username,\n          email: updatedUser.email,\n          bio: updatedUser.bio,\n          image: updatedUser.image,\n          token,\n        }),\n      );\n\n      dispatch({\n        type: \"SET_USER\",\n        payload: {\n          username: updatedUser.username,\n          email: updatedUser.email,\n          bio: updatedUser.bio,\n          image: updatedUser.image,\n          token,\n        },\n      });\n\n      return updatedUser;\n    } catch (error) {\n      console.error(\"Error during profile update:\", error);\n      dispatch({\n        type: \"ERROR\",\n        payload: error.response ? error.response.statusText : \"Network error\",\n      });\n      throw error;\n    } finally {\n      dispatch({ type: \"STOP_LOADING\" });\n    }\n  };\n\n  // выход\n  const logoutUser = () => {\n    // Очищаем токен и данные из localStorage\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"token\");\n\n    delete axios.defaults.headers.common[\"Authorization\"];\n\n    dispatch({ type: \"LOGOUT\" });\n\n    navigate(\"/signin\");\n  };\n\n  return (\n    <UsersContext.Provider\n      value={{\n        state,\n        fetchLoginUser,\n        registerUser,\n        logoutUser,\n        updateUserProfile,\n      }}\n    >\n      {children}\n    </UsersContext.Provider>\n  );\n};\n\nexport const useUsers = () => {\n  const context = useContext(UsersContext);\n\n  if (!context) {\n    throw new Error(\"useUsers must be used within an UsersProvider\");\n  }\n\n  return context;\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/contexts/UsersContext.jsx b/src/contexts/UsersContext.jsx
--- a/src/contexts/UsersContext.jsx	(revision 497de1981688132a66b43e8c95567738af785bd7)
+++ b/src/contexts/UsersContext.jsx	(date 1740478217181)
@@ -1,8 +1,9 @@
 import React, { createContext, useContext, useEffect, useReducer } from "react";
-import axios from "axios";
 import { BASE_URL } from "../utils/constant.jsx";
 import { useNavigate } from "react-router-dom";
 import defImage from "/src/assets/defImage.jpg";
+import { createAsyncThunk } from "@reduxjs/toolkit";
+import axios from "axios";
 
 const UsersContext = createContext();
 
@@ -104,7 +105,7 @@
       });
 
       console.log("User registered successfully:", response.data);
-      navigate("/signin");
+      navigate("/signin"); // Перенаправляем на страницу входа
     } catch (error) {
       console.error("Error during registration:", error);
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"41d83e05-b9f7-4290-a463-0fb619815c8b\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;Maryfrontend24&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;git@github.com:Maryfrontend24/Blog_App.git&quot;,\n    &quot;accountId&quot;: &quot;36e8223a-463c-4486-be3b-c04e109084b4&quot;\n  }\n}</component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;customColor&quot;: &quot;&quot;,\n  &quot;associatedIndex&quot;: 1\n}</component>\n  <component name=\"ProjectId\" id=\"2tATuM9RZrUykxaxAkoC1fNNF4b\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"git-widget-placeholder\": \"pravki-blog\",\n    \"last_opened_file_path\": \"/Users/mariapanova/WebstormProjects/Blog_App\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"npm.dev.executor\": \"Run\",\n    \"npm.lint:fix.executor\": \"Run\",\n    \"npm.prettier:fix.executor\": \"Run\",\n    \"ts.external.directory.path\": \"/Applications/WebStorm.app/Contents/plugins/javascript-plugin/jsLanguageServicesImpl/external\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RunManager\" selected=\"npm.dev\">\n    <configuration name=\"dev\" type=\"js.build_tools.npm\" temporary=\"true\" nameIsGenerated=\"true\">\n      <package-json value=\"$PROJECT_DIR$/package.json\" />\n      <command value=\"run\" />\n      <scripts>\n        <script value=\"dev\" />\n      </scripts>\n      <node-interpreter value=\"project\" />\n      <envs />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"lint:fix\" type=\"js.build_tools.npm\" temporary=\"true\" nameIsGenerated=\"true\">\n      <package-json value=\"$PROJECT_DIR$/package.json\" />\n      <command value=\"run\" />\n      <scripts>\n        <script value=\"lint:fix\" />\n      </scripts>\n      <node-interpreter value=\"project\" />\n      <envs />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"prettier:fix\" type=\"js.build_tools.npm\" temporary=\"true\" nameIsGenerated=\"true\">\n      <package-json value=\"$PROJECT_DIR$/package.json\" />\n      <command value=\"run\" />\n      <scripts>\n        <script value=\"prettier:fix\" />\n      </scripts>\n      <node-interpreter value=\"project\" />\n      <envs />\n      <method v=\"2\" />\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"npm.dev\" />\n        <item itemvalue=\"npm.lint:fix\" />\n        <item itemvalue=\"npm.prettier:fix\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-js-predefined-d6986cc7102b-410509235cf1-JavaScript-WS-242.20224.342\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"41d83e05-b9f7-4290-a463-0fb619815c8b\" name=\"Changes\" comment=\"\" />\n      <created>1739794102274</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1739794102274</updated>\n      <workItem from=\"1739794105146\" duration=\"794000\" />\n      <workItem from=\"1739794978354\" duration=\"6691000\" />\n      <workItem from=\"1739803495043\" duration=\"8461000\" />\n      <workItem from=\"1740042717419\" duration=\"17817000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 497de1981688132a66b43e8c95567738af785bd7)
+++ b/.idea/workspace.xml	(date 1740479284924)
@@ -6,6 +6,13 @@
   <component name="ChangeListManager">
     <list default="true" id="41d83e05-b9f7-4290-a463-0fb619815c8b" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/package-lock.json" beforeDir="false" afterPath="$PROJECT_DIR$/package-lock.json" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/package.json" beforeDir="false" afterPath="$PROJECT_DIR$/package.json" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/components/FormsModalAuth/UniversalForm.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/components/FormsModalAuth/UniversalForm.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/components/articleItem/ArticleItem.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/components/articleItem/ArticleItem.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/contexts/ArticlesDataContext.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/contexts/ArticlesDataContext.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/contexts/UsersContext.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/contexts/UsersContext.jsx" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -36,24 +43,24 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "pravki-blog",
-    "last_opened_file_path": "/Users/mariapanova/WebstormProjects/Blog_App",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "npm.dev.executor": "Run",
-    "npm.lint:fix.executor": "Run",
-    "npm.prettier:fix.executor": "Run",
-    "ts.external.directory.path": "/Applications/WebStorm.app/Contents/plugins/javascript-plugin/jsLanguageServicesImpl/external",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;pravki-blog&quot;,
+    &quot;last_opened_file_path&quot;: &quot;/Users/mariapanova/WebstormProjects/Blog_App&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;npm.dev.executor&quot;: &quot;Run&quot;,
+    &quot;npm.lint:fix.executor&quot;: &quot;Run&quot;,
+    &quot;npm.prettier:fix.executor&quot;: &quot;Run&quot;,
+    &quot;ts.external.directory.path&quot;: &quot;/Applications/WebStorm.app/Contents/plugins/javascript-plugin/jsLanguageServicesImpl/external&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
-  <component name="RunManager" selected="npm.dev">
+}</component>
+  <component name="RunManager" selected="npm.prettier:fix">
     <configuration name="dev" type="js.build_tools.npm" temporary="true" nameIsGenerated="true">
       <package-json value="$PROJECT_DIR$/package.json" />
       <command value="run" />
@@ -86,9 +93,9 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="npm.prettier:fix" />
         <item itemvalue="npm.dev" />
         <item itemvalue="npm.lint:fix" />
-        <item itemvalue="npm.prettier:fix" />
       </list>
     </recent_temporary>
   </component>
@@ -110,7 +117,7 @@
       <workItem from="1739794105146" duration="794000" />
       <workItem from="1739794978354" duration="6691000" />
       <workItem from="1739803495043" duration="8461000" />
-      <workItem from="1740042717419" duration="17817000" />
+      <workItem from="1740042717419" duration="34256000" />
     </task>
     <servers />
   </component>
